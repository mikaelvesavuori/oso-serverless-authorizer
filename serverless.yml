service: oso-serverless-authorizer
package:
  artifact: authorizer.zip

provider:
  name: aws
  runtime: nodejs16.x
  architecture: arm64
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-north-1'}
  memorySize: ${opt:memory, 512}
  timeout: 10
  logRetentionInDays: 7
  versionFunctions: false
  deploymentBucket:
    blockPublicAccess: true
    maxPreviousDeploymentArtifacts: 5
    serverSideEncryption: AES256
  stackTags:
    Usage: ${self:service}
  tags:
    Usage: ${self:service}
  apiGateway:
    minimumCompressionSize: 1024

plugins:
  - serverless-offline

custom:
  config:
    apiGatewayCachingTtl:
      prod: 30
      dev: 0
    apiGatewayCachingTtlValue: ${self:custom.config.apiGatewayCachingTtl.${self:provider.stage}, self:custom.config.apiGatewayCachingTtl.dev} # See: https://forum.serverless.com/t/api-gateway-custom-authorizer-caching-problems/4695

functions:
  OsoAuthorizer:
    handler: index.authorizerHandler
    description: Oso authorizer
  Demo:
    handler: index.demoHandler
    description: Demo function shielded by Oso authorizer
    events:
      - http:
          method: GET
          path: /
          authorizer:
            name: OsoAuthorizer
            resultTtlInSeconds: ${self:custom.config.apiGatewayCachingTtlValue}
            identitySource: method.request.header.Authorization
            type: request